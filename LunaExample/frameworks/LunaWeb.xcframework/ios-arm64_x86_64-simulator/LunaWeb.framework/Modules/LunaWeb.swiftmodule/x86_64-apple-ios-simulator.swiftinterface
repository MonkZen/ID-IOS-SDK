// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LunaWeb
import Foundation
import LunaCore
@_exported import LunaWeb
import Swift
import UIKit
import _Concurrency
public struct Face : Swift.Codable {
  public let id: Swift.String
  public let rect: LunaWeb.Rect?
  public let rectISO: LunaWeb.Rect?
  public let score: Swift.Double
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Lists : Swift.Decodable {
  public let personLists: [LunaWeb.PersonList]
  public let descriptorLists: [LunaWeb.DescriptorLists]
  public init(from decoder: Swift.Decoder) throws
}
public struct PersonList : Swift.Decodable {
  public let listData: Swift.String
  public let count: Swift.Int
  public let id: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public typealias DescriptorLists = LunaWeb.PersonList
public struct Estimation : Swift.Decodable {
  public let probability: Swift.Double
  public let quality: Swift.Double
  public init(from decoder: Swift.Decoder) throws
}
public struct IdentifyResponse : Swift.Codable {
  public let candidates: [LunaWeb.Candidate]
  public let face: LunaWeb.Face
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias HeadersHandler = (_ requestPath: Swift.String) -> [Swift.String : Swift.String]
public struct ListsResponse : Swift.Decodable {
  public let lists: LunaWeb.Lists
  public let personsListCount: Swift.Int, descriptorsListCount: Swift.Int
  public init(from decoder: Swift.Decoder) throws
}
public struct ExtractorResponse : Swift.Codable {
  public let personID: Swift.String
  public let face: LunaWeb.Face
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PersonQuery : Swift.Encodable {
  public init(userData: Swift.String?, externalID: Swift.String?, page: Swift.Int? = nil, pageSize: Swift.Int? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Liveness : Swift.Decodable {
  public let prediction: Swift.Int
  public let estimations: LunaWeb.Estimation
  public init(from decoder: Swift.Decoder) throws
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
public struct PredictLivenessQuery {
  public init(images: [Foundation.Data], aggregate: Swift.Bool)
}
public struct VerifyResponse : Swift.Codable {
  public typealias VerificationResult = Swift.Bool
  public let status: LunaWeb.VerifyResponse.VerificationResult
  public let candidates: [LunaWeb.Candidate]
  public let face: LunaWeb.Face
  public var candidate: LunaWeb.Candidate? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BatchVerificationQuery : Swift.Encodable {
  public struct Descriptor : Swift.Encodable {
    public enum DescriptorType : Swift.String, Swift.Encodable {
      case xpk_file
      case sdk_descriptor
      case raw_descriptor
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public init(id: Swift.String, type: LunaWeb.BatchVerificationQuery.Descriptor.DescriptorType, data: Foundation.Data)
    public func encode(to encoder: Swift.Encoder) throws
  }
  public init(references: [LunaWeb.BatchVerificationQuery.Descriptor], candidates: [LunaWeb.BatchVerificationQuery.Descriptor])
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias DescriptorQuery = LunaWeb.IdentifyQuery
public struct IdentifyQuery {
  public init(data: LunaWeb.BestShotData, isImageWarped: Swift.Bool)
}
public struct ExtractorQuery {
  public init(userData: Swift.String?, externalID: Swift.String?, data: LunaWeb.BestShotData, isImageWarped: Swift.Bool)
}
public struct LivenessPredictResponse : Swift.Decodable {
  public let images: [LunaWeb.LivenessPredict]
  public let aggregateEstimations: LunaWeb.AggregateEstimations
  public init(from decoder: Swift.Decoder) throws
}
public struct AggregateEstimations : Swift.Decodable {
  public let liveness: LunaWeb.Liveness
  public init(from decoder: Swift.Decoder) throws
}
public struct Candidate : Swift.Codable {
  public let personID: Swift.String
  public let descriptorID: Swift.String
  public let userData: Swift.String
  public let externalID: Swift.String
  public let similarity: Swift.Double
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Swift.Double {
  public func hasPassed(since: Foundation.TimeInterval) -> Swift.Bool
}
public class Throttler {
  public init(lastFire: Foundation.TimeInterval = 0, currentWorkItem: Dispatch.DispatchWorkItem? = nil)
  public func throttle(delay: Foundation.TimeInterval, queue: Dispatch.DispatchQueue = .main, action: @escaping (() -> Swift.Void)) -> () -> Swift.Void
  @objc deinit
}
public struct BatchVerificationResponse : Swift.Decodable {
  public let matches: [LunaWeb.BatchVerificationResponse.VerificationMatch]
  public struct VerificationMatch : Swift.Decodable {
    public let referenceID: Swift.String
    public let matches: [LunaWeb.BatchVerificationResponse.VerificationMatch.Match]
    public struct Match : Swift.Decodable {
      public let candidateID: Swift.String
      public let similarity: Swift.Double
      public let status: Swift.Bool
      public init(from decoder: Swift.Decoder) throws
    }
    public init(from decoder: Swift.Decoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct LivenessPredict : Swift.Decodable {
  public let filename: Swift.String
  public let status: Swift.Int
  public let liveness: LunaWeb.Liveness?
  public let error: LunaWeb.LivenessPredict.Error
  public struct Error : Swift.Codable {
    public let detail: Swift.String
    public let errorCode: Swift.Int
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
}
public enum NetworkingError : Foundation.LocalizedError {
  case invalidToken
  case lunaError(code: Swift.Int, message: Swift.String)
  case connectionError(Swift.Error)
  case clientError
  case serverError
  case livenessQualityError
  case livenessPredictionFakeError
  case livenessConnectionError
  public var errorDescription: Swift.String? {
    get
  }
}
public struct Rect : Swift.Codable {
  public let height: Swift.Double
  public let width: Swift.Double
  public let x: Swift.Double
  public let y: Swift.Double
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct VerifyQuery {
  public init(personID: Swift.String, isImageWarped: Swift.Bool, data: LunaWeb.BestShotData)
}
public enum BestShotData {
  case image(Foundation.Data)
  case descriptor(Foundation.Data)
  public func data() -> Foundation.Data
}
public struct GetPersonsResponse : Swift.Decodable {
  public let persons: [LunaWeb.Person]
  public let count: Swift.Int
  public init(from decoder: Swift.Decoder) throws
}
public class Person : Swift.Decodable {
  final public let id: Swift.String
  final public let userData: Swift.String
  final public let createTime: Swift.String
  final public let externalID: Swift.String
  final public let descriptors: [Swift.String]
  final public let lists: [Swift.String]
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class LivenessAPIv6 : ObjectiveC.NSObject, LunaCore.LCOnlineLivenessProtocol {
  public init(configuration: LunaCore.LCLunaConfiguration, additionalHeaders: LunaWeb.HeadersHandler? = nil)
  @objc public func checkOnline(with images: [UIKit.UIImage], completion: @escaping (Swift.Int32, Swift.Error?) -> Swift.Void)
  @objc public func checkOnline(withDescriptors descriptors: [Foundation.Data], completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  @objc deinit
}
public struct APIv6 {
  public let images: LunaWeb.APIv6.Images
  public let events: LunaWeb.APIv6.Events
  public let verifiers: LunaWeb.APIv6.Verifiers
  public let faces: LunaWeb.APIv6.Faces
  public init(lunaAccountID: Swift.String, lunaServerURL: Foundation.URL?, additionalHeaders: LunaWeb.HeadersHandler?)
}
extension LunaWeb.APIv6 {
  public func liveness(query: LunaWeb.PredictLivenessQuery, requestId: Swift.String, handler: @escaping (Swift.Result<LunaWeb.LivenessPredictResponse, Swift.Error>) -> Swift.Void)
  public struct Images {
    public func createImage(imageData: Foundation.Data, requestId: Swift.String, handler: @escaping (Swift.Result<LunaWeb.CreateImageResponse, Swift.Error>) -> Swift.Void)
  }
  public struct Events {
    public func generateEvents(handlerID: Swift.String, query: LunaWeb.EventQuery, handler: @escaping (Swift.Result<LunaWeb.APIv6.EventsResponse, Swift.Error>) -> Swift.Void)
  }
  public struct Verifiers {
    public func performVerification(verifyID: Swift.String, query: LunaWeb.PerformVerificationQuery, handler: @escaping (Swift.Result<LunaWeb.APIv6.PerformVerificationResponse, Swift.Error>) -> Swift.Void)
    public func rawVerification(verifyID: Swift.String, query: LunaWeb.BatchVerificationQuery, handler: @escaping (Swift.Result<LunaWeb.BatchVerificationResponse, Swift.Error>) -> Swift.Void)
  }
  public struct Faces {
    public func deleteFace(faceID: Swift.String, handler: @escaping (Swift.Result<LunaWeb.APIv6.GetFacesResponse, Swift.Error>) -> Swift.Void)
    public func getFaces(query: LunaWeb.GetFacesQuery, handler: @escaping (Swift.Result<LunaWeb.APIv6.GetFacesResponse, Swift.Error>) -> Swift.Void)
  }
}
public struct CreateImageResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension LunaWeb.APIv6 {
  public struct EventsResponse : Swift.Codable {
    public let events: [LunaWeb.APIv6.Event]
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Event : Swift.Codable {
    public let face: LunaWeb.APIv6.Face?
    public let matches: [LunaWeb.APIv6.Matches]?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Face : Swift.Codable {
    public let id: Swift.String?
    public let externalID: Swift.String?
    public let userData: Swift.String?
    public let lists: [Swift.String]?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Matches : Swift.Codable {
    public let candidates: [LunaWeb.APIv6.Candidates]
    public let label: Swift.String
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Candidates : Swift.Codable {
    public let face: LunaWeb.APIv6.Face
    public let similarity: Swift.Double
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Candidate : Swift.Codable {
    public let face: LunaWeb.APIv6.Face
    public let similarity: Swift.Double
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
public enum ImageType : Swift.Int {
  case rawImage, faceWarpedImage, bodyWarpedImage
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct EventQuery {
  public init(data: LunaWeb.BestShotData, imageType: LunaWeb.ImageType, city: Swift.String? = nil, area: Swift.String? = nil, district: Swift.String? = nil, street: Swift.String? = nil, houseNumber: Swift.String? = nil, longitude: Swift.Double? = nil, latitude: Swift.Double? = nil, externalID: Swift.String? = nil, userData: Swift.String? = nil, aggregateAttributes: Swift.Bool? = nil, source: Swift.String? = nil, tags: [Swift.String]? = nil, trackID: Swift.String? = nil, useExifInfo: Swift.Bool? = nil)
}
public struct PerformVerificationQuery {
  public let data: LunaWeb.BestShotData
  public let faceIDs: [Swift.String]?
  public let eventIDs: [Swift.String]?
  public let externalIDs: [Swift.String]?
  public let useExifInfo: Swift.Bool?
  public init(data: LunaWeb.BestShotData, faceIDs: [Swift.String]? = nil, eventIDs: [Swift.String]? = nil, externalIDs: [Swift.String]? = nil, useExifInfo: Swift.Bool? = nil)
}
extension LunaWeb.APIv6 {
  public struct PerformVerificationResponse : Swift.Codable {
    public let images: [LunaWeb.APIv6.Image]
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension LunaWeb.APIv6 {
  public struct Image : Swift.Codable {
    public let error: LunaWeb.APIv6.Image.Error
    public let status: Swift.Int
    public let filename: Swift.String
    public let detections: LunaWeb.APIv6.Image.FaceDetections
    public struct Error : Swift.Codable {
      public let errorCode: Swift.Int
      public let desc: Swift.String
      public let detail: Swift.String
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct FaceDetections : Swift.Codable {
      public let faceDetections: [LunaWeb.APIv6.FaceDetection]
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension LunaWeb.APIv6 {
  public struct FaceDetection : Swift.Codable {
    public let verifications: [LunaWeb.APIv6.FaceDetection.Verification]
    public struct Verification : Swift.Codable {
      public let similarity: Swift.Double
      public let status: Swift.Bool
      public let face: LunaWeb.APIv6.Face
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
public struct GetFacesQuery {
  public enum Target : Swift.String {
    case faceID
    case accountID
    case eventID
    case userData
    case createTime
    case externalID
    case avatar
    case lists
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let userData: Swift.String?
  public let externalIDs: [Swift.String]?
  public let targets: [LunaWeb.GetFacesQuery.Target]?
  public init(userData: Swift.String? = nil, externalIDs: [Swift.String]? = nil, targets: [LunaWeb.GetFacesQuery.Target]? = nil)
}
extension LunaWeb.APIv6 {
  public struct GetFacesResponse : Swift.Codable {
    public let faces: [LunaWeb.APIv6.Face]
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension LunaWeb.BatchVerificationQuery.Descriptor.DescriptorType : Swift.Equatable {}
extension LunaWeb.BatchVerificationQuery.Descriptor.DescriptorType : Swift.Hashable {}
extension LunaWeb.BatchVerificationQuery.Descriptor.DescriptorType : Swift.RawRepresentable {}
extension LunaWeb.ImageType : Swift.Equatable {}
extension LunaWeb.ImageType : Swift.Hashable {}
extension LunaWeb.ImageType : Swift.RawRepresentable {}
extension LunaWeb.GetFacesQuery.Target : Swift.Equatable {}
extension LunaWeb.GetFacesQuery.Target : Swift.Hashable {}
extension LunaWeb.GetFacesQuery.Target : Swift.RawRepresentable {}
